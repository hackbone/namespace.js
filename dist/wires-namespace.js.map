{"version":3,"sources":["wires-namespace.js"],"names":[],"mappings":";;;;;;;;;;;;;MAAO,CAAC;;;;;;AAMR,WAAS,SAAS,GAAG,EAAE;;;;;;;;;AASvB,MAAI,gBAAgB,GAAG,KAAK,CAAC;;;;;;;;AAQ7B,MAAI,SAAS,GAAG,EAAE,CAAC;;AAEnB,GAAC,CAAC,MAAM,CAAC,SAAS,CAAC,SAAS,EAAE;;;;;;;;;;;;AAY5B,OAAG,EAAA,aAAC,OAAO,EAAE,UAAU,EAAE;AACvB,aAAO,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,UAAS,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,OAAO,EAAE;AAC9D,YAAI,KAAK,GAAG,CAAC,KAAK,OAAO,CAAC,MAAM,EAAE;AAChC,cAAI,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;SAC/C;AACD,eAAO,IAAI,CAAC,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAA,AAAC,CAAC;OACxC,CAAC,CAAC;KACJ;;;;;;;;;;;AAWD,OAAG,EAAA,aAAC,OAAO,EAAE;AACX,aAAO,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;KAC5B;;;;;;;;;;;;AAYD,SAAK,EAAA,cAAC,OAAO,EAAE,QAAQ,EAAE;AACvB,aAAO,CAAC,CAAC,MAAM,CACb,SAAS,CAAC,OAAO,CAAC,KAAK,SAAS,CAAC,OAAO,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAA,AAAC,EAC5E,QAAQ,IAAI,UAAS,IAAI,EAAE,IAAI,EAAE;AAC/B,eAAO,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;OAC3B,EACD,IAAI,CACL,CAAC;KACH;GACF,CAAC,CAAC;;mBAEY,SAAS","file":"wires-namespace.js","sourcesContent":["import _ from 'lodash';\n\n/**\n * @module namespace\n * @class namespace\n */\nfunction Namespace() {}\n\n/**\n * Regex for splitting keypaths into arrays.\n *\n * @private\n * @const {RegExp}\n * @type\n */\nvar KEYPATH_SPLITTER = /\\./g;\n\n/**\n * An internal cache to avoid calculating a keypath more than once.\n *\n * @private\n * @type {Object}\n */\nvar _keypaths = {};\n\n_.extend(Namespace.prototype, {\n\n  /**\n   * Adds a definition to the namespace object.\n   *\n   * @public\n   * @instance\n   * @method add\n   * @param {String} keypath - The keypath for the definition to be added at.\n   * @param {Function|Object} definition - The definition to be added.\n   * @return {Function|Object} - The definition.\n   */\n  add(keypath, definition) {\n    return this._walk(keypath, function(memo, name, index, keypath) {\n      if (index + 1 === keypath.length) {\n        memo[name] = _.extend(definition, memo[name]);\n      }\n      return memo[name] || (memo[name] = {});\n    });\n  },\n\n  /**\n   * Retrieves a definition from the namespace safely.\n   *\n   * @public\n   * @instance\n   * @method get\n   * @param {String} keypath - The keypath to lookup a definition for.\n   * @returns {Function|Object|undefined} - The definition if it exists, otherwise `undefined`.\n   */\n  get(keypath) {\n    return this._walk(keypath);\n  },\n\n  /**\n   * An internal function for walking a keypath.\n   *\n   * @private\n   * @instance\n   * @method _walk\n   * @param {String} keypath - The keypath to walk through.\n   * @param {Function} [callback] - An optional callback to be called at each item in the path.\n   * @returns {function|Object|undefined} - The reduced keypath.\n   */\n  _walk(keypath, callback) {\n    return _.reduce(\n      _keypaths[keypath] || (_keypaths[keypath] = keypath.split(KEYPATH_SPLITTER)),\n      callback || function(memo, name) {\n        return memo && memo[name];\n      },\n      this\n    );\n  }\n});\n\nexport default Namespace;\n"],"sourceRoot":"/source/"}