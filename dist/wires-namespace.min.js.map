{"version":3,"sources":["/source/wires-namespace.js"],"names":[],"mappings":"qNAMA,SAAS,qDANF,EAAC,EAAA,GAeJ,EAAmB,MAQnB,IAEJ,GAAE,OAAO,EAAU,WAYjB,IAAG,SAAC,EAAS,GACX,MAAO,MAAK,MAAM,EAAS,SAAS,EAAM,EAAM,EAAO,GAIrD,MAHI,GAAQ,IAAM,EAAQ,SACxB,EAAK,GAAQ,EAAE,OAAO,EAAY,EAAK,KAElC,EAAK,KAAU,EAAK,UAa/B,IAAG,SAAC,GACF,MAAO,MAAK,MAAM,IAapB,MAAK,SAAC,EAAS,GACb,MAAO,GAAE,OACP,EAAU,KAAa,EAAU,GAAW,EAAQ,MAAM,IAC1D,GAAY,SAAS,EAAM,GACzB,MAAO,IAAQ,EAAK,IAEtB,mBAKS","file":"wires-namespace.min.js","sourcesContent":["import _ from 'lodash';\n\n/**\n * @module namespace\n * @class namespace\n */\nfunction Namespace() {}\n\n/**\n * Regex for splitting keypaths into arrays.\n *\n * @private\n * @const {RegExp}\n * @type\n */\nvar KEYPATH_SPLITTER = /\\./g;\n\n/**\n * An internal cache to avoid calculating a keypath more than once.\n *\n * @private\n * @type {Object}\n */\nvar _keypaths = {};\n\n_.extend(Namespace.prototype, {\n\n  /**\n   * Adds a definition to the namespace object.\n   *\n   * @public\n   * @instance\n   * @method add\n   * @param {String} keypath - The keypath for the definition to be added at.\n   * @param {Function|Object} definition - The definition to be added.\n   * @return {Function|Object} - The definition.\n   */\n  add(keypath, definition) {\n    return this._walk(keypath, function(memo, name, index, keypath) {\n      if (index + 1 === keypath.length) {\n        memo[name] = _.extend(definition, memo[name]);\n      }\n      return memo[name] || (memo[name] = {});\n    });\n  },\n\n  /**\n   * Retrieves a definition from the namespace safely.\n   *\n   * @public\n   * @instance\n   * @method get\n   * @param {String} keypath - The keypath to lookup a definition for.\n   * @returns {Function|Object|undefined} - The definition if it exists, otherwise `undefined`.\n   */\n  get(keypath) {\n    return this._walk(keypath);\n  },\n\n  /**\n   * An internal function for walking a keypath.\n   *\n   * @private\n   * @instance\n   * @method _walk\n   * @param {String} keypath - The keypath to walk through.\n   * @param {Function} [callback] - An optional callback to be called at each item in the path.\n   * @returns {function|Object|undefined} - The reduced keypath.\n   */\n  _walk(keypath, callback) {\n    return _.reduce(\n      _keypaths[keypath] || (_keypaths[keypath] = keypath.split(KEYPATH_SPLITTER)),\n      callback || function(memo, name) {\n        return memo && memo[name];\n      },\n      this\n    );\n  }\n});\n\nexport default Namespace;\n"],"sourceRoot":"/source/"}