{"version":3,"sources":["/Users/thejameskyle/git/marionette/namespace.js/src/namespace.js"],"names":[],"mappings":"CAAA,SAAU,EAAM,GACQ,kBAAX,SAAyB,OAAO,IACzC,QAAQ,UAAW,GACS,mBAAZ,SAChB,OAAO,QAAU,EAAQ,QAAQ,WAEjC,EAAK,UAAY,EAAQ,EAAK,IAE/B,KAAM,SAAS,GAChB,YAMA,SAAS,MAST,GAAI,GAAmB,MAQnB,IAyDJ,OAvDA,GAAE,OAAO,EAAU,WAYjB,IAAE,SAAE,EAAS,GACX,MAAO,MAAK,MAAM,EAAS,SAAS,EAAM,EAAM,EAAO,GAIrD,MAHI,GAAM,IAAQ,EAAQ,SACxB,EAAK,GAAQ,EAAE,OAAO,EAAY,EAAK,KAElC,EAAK,KAAU,EAAK,UAa/B,IAAE,SAAE,GACF,MAAO,MAAK,MAAM,IAapB,MAAI,SAAE,EAAS,GACb,MAAO,GAAE,OACP,EAAU,KAAa,EAAU,GAAW,EAAQ,MAAM,IAC1D,GAAY,SAAS,EAAM,GACzB,MAAO,IAAQ,EAAK,IAEtB,SAKC","file":"namespace.min.js","sourcesContent":["(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(['lodash'], factory);\n  } else if (typeof exports !== 'undefined') {\n    module.exports = factory(require('lodash'));\n  } else {\n    root.Namespace = factory(root._);\n  }\n})(this, function(_) {\n  'use strict';\n\n  /**\n   * @module namespace\n   * @class namespace\n   */\n  function Namespace() {}\n  \n  /**\n   * Regex for splitting keypaths into arrays.\n   *\n   * @private\n   * @const {RegExp}\n   * @type\n   */\n  var KEYPATH_SPLITTER = /\\./g;\n  \n  /**\n   * An internal cache to avoid calculating a keypath more than once.\n   *\n   * @private\n   * @type {Object}\n   */\n  var _keypaths = {};\n  \n  _.extend(Namespace.prototype, {\n  \n    /**\n     * Adds a definition to the namespace object.\n     *\n     * @public\n     * @instance\n     * @method add\n     * @param {String} keypath - The keypath for the definition to be added at.\n     * @param {Function|Object} definition - The definition to be added.\n     * @return {Function|Object} - The definition.\n     */\n    add(keypath, definition) {\n      return this._walk(keypath, function(memo, name, index, keypath) {\n        if (index + 1 === keypath.length) {\n          memo[name] = _.extend(definition, memo[name]);\n        }\n        return memo[name] || (memo[name] = {});\n      });\n    },\n  \n    /**\n     * Retrieves a definition from the namespace safely.\n     *\n     * @public\n     * @instance\n     * @method get\n     * @param {String} keypath - The keypath to lookup a definition for.\n     * @returns {Function|Object|undefined} - The definition if it exists, otherwise `undefined`.\n     */\n    get(keypath) {\n      return this._walk(keypath);\n    },\n  \n    /**\n     * An internal function for walking a keypath.\n     *\n     * @private\n     * @instance\n     * @method _walk\n     * @param {String} keypath - The keypath to walk through.\n     * @param {Function} [callback] - An optional callback to be called at each item in the path.\n     * @returns {function|Object|undefined} - The reduced keypath.\n     */\n    _walk(keypath, callback) {\n      return _.reduce(\n        _keypaths[keypath] || (_keypaths[keypath] = keypath.split(KEYPATH_SPLITTER)),\n        callback || function(memo, name) {\n          return memo && memo[name];\n        },\n        this\n      );\n    }\n  });\n  \n  return Namespace;\n});\n"],"sourceRoot":"/source/"}